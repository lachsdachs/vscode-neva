---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: neva
scopeName: source.neva
fileTypes:
  - ".neva"

# ================================================================
# REPOSITORY (reusable patterns)
# ================================================================
repository:
  # Comments
  comments:
    patterns:
      - name: comment.line.double-slash
        begin: "\\/\\/" # Matches the start of a single-line comment (//)
        beginCaptures:
          "1":
            name: punctuation.definition.comment
        end: "(?:\\n|$)" # Matches the end of a line or the end of the input

  # Pub keyword
  pub:
    match: "\\b(pub)\\b" # Matches the keyword 'pub'
    name: storage.modifier.public

  # ----------------------------------------------------------------
  # TYPES
  # ----------------------------------------------------------------

  # Builtin types
  storage_types:
    patterns:
      - match: "\\bany\\b" # Matches the keyword 'any'
        name: storage.type.any
      - match: "\\bmaybe\\b" # Matches the keyword 'maybe'
        name: storage.type.maybe
      - match: "\\bbool\\b" # Matches the keyword 'bool'
        name: storage.type.boolean
      - match: "\\b(int|float)\\b" # Matches the keywords 'int' or 'float'
        name: storage.type.numeric
      - match: "\\bstring\\b" # Matches the keyword 'string'
        name: storage.type.string
      - match: "\\bmap\\b" # Matches the keyword 'map'
        name: storage.type.map
      - match: "\\blist\\b" # Matches the keyword 'list'
        name: storage.type.list
      - match: "\\berror\\b" # Matches the keyword 'error'
        name: storage.type.error
      - match: "\\bstream\\b" # Matches the keyword 'stream'
        name: storage.type.stream
      - include: "#struct_type"
      - include: "#enum_type"

  # Struct type (indirect-recursive via storage_types)
  struct_type:
    patterns:
      - begin: "\\b(struct)\\s*\\{"
        beginCaptures:
          "1":
            name: keyword.struct
        end: "\\}"
        patterns:
          - include: "#storage_types"
          - include: "#comments"

  # Enum type
  enum_type:
    patterns:
      - begin: "\\b(enum)\\s*\\{"
        beginCaptures:
          "1":
            name: storage.type.enum
        end: "\\}"
        name: variable.other.enummember

  # ----------------------------------------------------------------
  # CONSTANT LITERALS
  # ----------------------------------------------------------------

  const_literals:
    patterns:
      - include: "#nil_literal"
      - include: "#bool_literals"
      - include: "#numeric_literals"
      - include: "#string_literals"
      - include: "#list_literal"
      - include: "#struct_literal"

  # Numeric literals
  numeric_literals:
    patterns:
      - match: "\\b0[xX][0-9a-fA-F]+\\b" # Matches hexadecimal literals (e.g., 0x1a3)
        name: constant.numeric.hexadecimal
      - match: "\\b[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?\\b" # Matches floating-point literals (e.g., 3.14, 2.71e5)
        name: constant.numeric.float
      - match: "\\b[0-9]+\\b" # Matches integer literals (e.g., 123)
        name: constant.numeric.integer

  # String literals
  string_literals:
    patterns:
      - name: string.quoted.double
        begin: '"' # Matches the start of a string literal (")
        end: '"' # Matches the end of a string literal (")
        patterns:
          - match: \\"" # Matches an escaped double quote (\")
            name: constant.character.escape.double-quote

  # Boolean literals
  bool_literals:
    match: "\\b(true|false)" # Matches the keywords 'true' or 'false'
    name: constant.language.boolean

  # Nil literal
  nil_literal:
    match: "\\b(nil)" # Matches the keyword 'nil'
    name: constant.language.nil

  # Structure (and map) literal
  struct_literal:
    patterns:
      - begin: "\\{"
        end: "\\}"
        patterns:
          - include: "#const_literals"

  # List literal
  list_literal:
    patterns:
      - begin: "\\["
        end: "\\]"
        patterns:
          - include: "#const_literals"

  # ----------------------------------------------------------------
  # OTHER
  # ----------------------------------------------------------------

  # Compiler directives
  compiler_directives:
    patterns:
      - name: meta.directive
        begin: "\\#"
        beginCaptures:
          "1":
            name: meta.directive
        end: "(?:\\n|$)" # Matches the end of a line or the end of the input

  # Component nodes (used for components and node's DI)
  component_nodes:
    patterns:
      - include: "#storage_types"
      - match: "^(\\s*)\\b(\\w+)\\b" # Matches a line with some whitespace, followed by a word
        captures:
          "2":
            name: variable.other.node
      - begin: "\\{"
        end: "\\}"
        patterns:
          - include: "#component_nodes"

# ================================================================
# PATTERNS (actual rules)
# ================================================================
patterns:
  - include: "#comments"
  - include: "#pub"
  - include: "#compiler_directives"

  # Imports
  - begin: "\\b(import)\\s*\\{" # Matches the keyword 'import' followed by optional whitespace and an opening curly brace
    beginCaptures:
      "1":
        name: keyword.import
    end: "\\}" # Matches a closing curly brace
    patterns:
      - include: "#comments"

  # Type (group form)
  - begin: "\\b(type)\\s*\\{" # Matches the keyword 'type' followed by optional whitespace and an opening curly brace
    beginCaptures:
      "1":
        name: keyword.type
    end: "\\}" # Matches a closing curly brace
    patterns:
      - include: "#pub"
      - include: "#storage_types"
      - include: "#comments"

  # Type (single form)
  - match: "\\b(type)\\s+(.*)" # FIXME ends at \n
    captures:
      "1":
        name: keyword.type
      "2":
        patterns:
          - include: "#storage_types"
          - include: "#comments"

  # Interface (group form)
  - begin: "\\b(interface)\\s*\\{" # Matches the keyword 'interface' followed by optional whitespace and an opening curly brace
    beginCaptures:
      "1":
        name: keyword.declaration.interfaces
    end: "\\}" # Matches a closing curly brace
    patterns:
      - include: "#pub"
      - include: "#storage_types"
      - include: "#comments"

  # Interface (single form)
  - match: "\\b(interface)\\s+(.*)" # FIXME ends at \n
    captures:
      "1":
        name: keyword.declaration.interfaces
      "2":
        patterns:
          - include: "#storage_types"

  # Constant (group form)
  - begin: "\\b(const)\\s*\\{" # Matches the keyword 'const' followed by optional whitespace and an opening curly brace
    beginCaptures:
      "1":
        name: keyword.declaration.const
    end: "\\}" # Matches a closing curly brace
    patterns:
      - include: "#pub"
      - include: "#const_literals"
      - include: "#storage_types"
      - include: "#comments"

  # Constant (single form)
  - match: "\\b(const)\\s+(.*)" # FIXME ends at \n
    captures:
      "1":
        name: keyword.declaration.consts
      "2":
        patterns:
          - include: "#storage_types"

  # Component (group form)
  - begin: "\\b(component)\\s*\\{"
    beginCaptures:
      "1":
        name: keyword.declaration.function
    end: "\\}"
    patterns:
      - include: "#compiler_directives"
      - include: "#pub"
      - include: "#storage_types"
      - match: "\\b(\\w+)\\b(?=\\s*<|\\s*\\()"
        name: "entity.name.section"
      - begin: "\\{"
        end: "\\}"
        patterns:
          # Component Nodes
          - begin: "\\b(nodes)\\s*\\{" # Matches the keyword 'nodes' followed by optional whitespace and an opening curly brace
            beginCaptures:
              "1":
                name: entity.name.section
            end: "\\}" # Matches a closing curly brace
            patterns:
              - include: "#component_nodes"

          # Component Net
          - begin: "\\b(net)\\s*\\{" # Matches the keyword 'net' followed by optional whitespace and an opening curly brace
            beginCaptures:
              "1":
                name: entity.name.section
            end: "\\}" # Matches a closing curly brace
            patterns:
              - match: "->" # Matches the '->' operator
                name: keyword.control
              - begin: "\\{"
                end: "\\}"

  # Component (single form)
  - begin: "\\b(component)\\s+(.*)\\{"
    beginCaptures:
      "1":
        name: keyword.declaration.function
      "2":
        name: entity.section.name
    end: "\\}"
    patterns:
      - include: "#storage_types"
      - begin: "\\b(nodes)\\s*\\{"
        beginCaptures:
          "1":
            name: entity.name.section
        end: "\\}"
        patterns:
          - include: "#component_nodes"
      - begin: "\\b(net)\\s*\\{"
        beginCaptures:
          "1":
            name: entity.name.section
        end: "\\}"
        patterns:
          - match: "->"
            name: keyword.control
          - begin: "\\{"
            end: "\\}"
