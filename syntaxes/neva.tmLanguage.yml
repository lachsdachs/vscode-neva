---
"$schema": https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: neva
scopeName: source.neva
fileTypes:
  - ".neva"

# ================================================================
# REPOSITORY (reusable patterns)
# ================================================================

repository:
  comments:
    patterns:
      - name: comment.line.double-slash
        begin: "\\/\\/" # Matches the start of a single-line comment (//)
        beginCaptures:
          "1":
            name: punctuation.definition.comment
        end: "(?:\\n|$)" # Matches the end of a line or the end of the input

  pub:
    match: "\\b(pub)\\b" # Matches the keyword 'pub'
    name: storage.modifier.public

  # ----------------------------------------------------------------
  # TYPES
  # ----------------------------------------------------------------

  builtin_types:
    patterns:
      - match: "\\bany\\b" # Matches the keyword 'any'
        name: storage.type.any
      - match: "\\bmaybe\\b" # Matches the keyword 'maybe'
        name: storage.type.maybe
      - match: "\\bbool\\b" # Matches the keyword 'bool'
        name: storage.type.boolean
      - match: "\\b(int|float)\\b" # Matches the keywords 'int' or 'float'
        name: storage.type.numeric
      - match: "\\bstring\\b" # Matches the keyword 'string'
        name: storage.type.string
      - match: "\\bmap\\b" # Matches the keyword 'map'
        name: storage.type.map
      - match: "\\blist\\b" # Matches the keyword 'list'
        name: storage.type.list
      - match: "\\berror\\b" # Matches the keyword 'error'
        name: storage.type.error
      - match: "\\bstream\\b" # Matches the keyword 'stream'
        name: storage.type.stream
      - include: "#struct_type"
      - include: "#enum_type"

  struct_type:
    patterns:
      - begin: "\\b(struct)\\s*\\{"
        beginCaptures:
          "1":
            name: keyword.struct
        end: "\\}"
        patterns:
          - include: "#builtin_types" # recursion
          - include: "#comments"

  enum_type:
    patterns:
      - begin: "\\b(enum)\\s*\\{"
        beginCaptures:
          "1":
            name: storage.type.enum
        end: "\\}"
        name: variable.other.enummember

  # ----------------------------------------------------------------
  # CONSTANT LITERALS
  # ----------------------------------------------------------------

  const_literals:
    patterns:
      - include: "#nil_literal"
      - include: "#bool_literals"
      - include: "#num_literals"
      - include: "#string_literals"
      - include: "#list_literal"
      - include: "#struct_literal"

  num_literals:
    patterns:
      - match: "\\b0[xX][0-9a-fA-F]+\\b"
        name: constant.numeric.hexadecimal
      - match: "\\b[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?\\b"
        name: constant.numeric.float
      - match: "\\b[0-9]+\\b"
        name: constant.numeric.integer

  string_literals:
    patterns:
      - name: string.quoted.double
        begin: '"'
        end: '"'
        patterns:
          - match: \\""
            name: constant.character.escape.double-quote

  bool_literals:
    match: "\\b(true|false)"
    name: constant.language.boolean

  nil_literal:
    match: "\\b(nil)"
    name: constant.language.nil

  struct_literal: # and map literal
    patterns:
      - begin: "\\{"
        end: "\\}"
        patterns:
          - include: "#const_literals" # recursion

  list_literal:
    patterns:
      - begin: "\\["
        end: "\\]"
        patterns:
          - include: "#const_literals" # recursion

  # ----------------------------------------------------------------
  # OTHER
  # ----------------------------------------------------------------

  compiler_directives:
    patterns:
      - name: meta.directive
        begin: "\\#"
        beginCaptures:
          "1":
            name: meta.directive
        end: "(?:\\n|$)" # end of line or end of the input

  component_nodes:
    patterns:
      - include: "#builtin_types"
      - match: "^(\\s*)\\b(\\w+)\\b"
        captures:
          "2":
            name: variable.other.node
      - begin: "\\{"
        end: "\\}"
        patterns:
          - include: "#component_nodes"

# ================================================================
# PATTERNS (actual rules)
# ================================================================
patterns:
  - include: "#comments"
  - include: "#pub"
  - include: "#compiler_directives"

  # ----------------------------------------------------------------
  # IMPORTS
  # ----------------------------------------------------------------
  - begin: "\\b(import)\\s*\\{"
    beginCaptures:
      "1":
        name: keyword.import
    end: "\\}"
    patterns:
      - include: "#comments"

  # ----------------------------------------------------------------
  # TYPES
  # ----------------------------------------------------------------

  # GROUP
  - begin: "\\b(type)\\s*\\{"
    beginCaptures:
      "1":
        name: keyword.type
    end: "\\}"
    patterns:
      - include: "#pub"
      - include: "#builtin_types"
      - include: "#comments"

  # SINGLE
  - match: "\\b(type)\\s+(.*)" # FIXME ends at \n
    captures:
      "1":
        name: keyword.type
      "2":
        patterns:
          - include: "#builtin_types"
          - include: "#comments"

  # ----------------------------------------------------------------
  # INTERFACES
  # ----------------------------------------------------------------

  # GROUP
  - begin: "\\b(interface)\\s*\\{"
    beginCaptures:
      "1":
        name: keyword.declaration.interfaces
    end: "\\}"
    patterns:
      - include: "#pub"
      - include: "#builtin_types"
      - include: "#comments"

  # SINGLE
  - match: "\\b(interface)\\s+(.*)" # FIXME ends at \n
    captures:
      "1":
        name: keyword.declaration.interfaces
      "2":
        patterns:
          - include: "#builtin_types"

  # ----------------------------------------------------------------
  # CONSTANTS
  # ----------------------------------------------------------------

  # GROUP FORM
  - begin: "\\b(const)\\s*\\{" # Matches the keyword 'const' followed by optional whitespace and an opening curly brace
    beginCaptures:
      "1":
        name: keyword.declaration.const
    end: "\\}" # Matches a closing curly brace
    patterns:
      - include: "#pub"
      - include: "#const_literals"
      - include: "#builtin_types"
      - include: "#comments"

  # SINGLE
  - match: "\\b(const)\\s+(.*)" # FIXME ends at \n
    captures:
      "1":
        name: keyword.declaration.consts
      "2":
        patterns:
          - include: "#builtin_types"
          - include: "#const_literals"

  # ----------------------------------------------------------------
  # CONSTANTS
  # ----------------------------------------------------------------

  # GROUP
  - begin: "\\b(component)\\s*\\{"
    beginCaptures:
      "1":
        name: keyword.declaration.function
    end: "\\}"
    patterns:
      - include: "#compiler_directives"
      - include: "#pub"
      - include: "#builtin_types"
      - match: "\\b(\\w+)\\b(?=\\s*<|\\s*\\()"
        name: "entity.name.section"
      - begin: "\\{"
        end: "\\}"
        patterns:
          # Component Nodes
          - begin: "\\b(nodes)\\s*\\{" # Matches the keyword 'nodes' followed by optional whitespace and an opening curly brace
            beginCaptures:
              "1":
                name: entity.name.section
            end: "\\}" # Matches a closing curly brace
            patterns:
              - include: "#component_nodes"

          # Component Net
          - begin: "\\b(net)\\s*\\{" # Matches the keyword 'net' followed by optional whitespace and an opening curly brace
            beginCaptures:
              "1":
                name: entity.name.section
            end: "\\}" # Matches a closing curly brace
            patterns:
              - match: "->" # Matches the '->' operator
                name: keyword.control
              - begin: "\\{"
                end: "\\}"

  # SINGLE
  - begin: "\\b(component)\\s+(.*)\\{"
    beginCaptures:
      "1":
        name: keyword.declaration.function
      "2":
        patterns:
          - include: "#builtin_types"
    end: "\\}"
    patterns:
      - include: "#builtin_types"
      - begin: "\\b(nodes)\\s*\\{"
        beginCaptures:
          "1":
            name: entity.name.section
        end: "\\}"
        patterns:
          - include: "#component_nodes"
      - begin: "\\b(net)\\s*\\{"
        beginCaptures:
          "1":
            name: entity.name.section
        end: "\\}"
        patterns:
          - match: "->"
            name: keyword.control
          - begin: "\\{"
            end: "\\}"
