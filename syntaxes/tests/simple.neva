// comments

import {
    std/io
    std/strconv

    @/my_lovely_mod/foo
    @/my_lovely_mod/bar
    @/my_lovely_mod/baz

	github.com/nevalang/x
}

types {
    pub Num int | float
    pub Primitive Num | string | bool
    pub Users list<User>
    User struct {
        age int
        name string
        bestFriend struct {
            isDog bool // should be true
        }
    }
}

interfaces {
    IStreamHandler<T>(seq stream<T>) (res T)
    pub IListStreamer<T>(l list<T>) (seq stream<T>)
}

const {
    pi float 3.14
    greet string "Hello, world!"
    pub maybeInt maybe<int>
    pub nums list<int>[1, 2, 3, 4, 5]
}

components {
    Main(enter any) (exit any) {
        nodes {
            bypass Bypass<float>
            printer Printer<float>
            writer foo.FileWriter
        }
        net {
            in:enter -> (pi -> bypass:foo)
            bypass:bar -> [printer:msg, writer:msg]
            printer:msg -> out:exit
        }
    }

    pub Bypass<T float>(foo T) (bar T) {
        net { in.foo -> out.bar }
    }
}

