// comments

import { // asd
    std/tmp/io // asdasdas asd1 1s
    // asdasx
	stdpkg // asd
	imported/from/elsewhereas // asd
	with_alias another/imported/from/elsewhere
} // adsad

types { // adsad
    MyErr error // asdasdasd
    MyFloat float // asdasdasd
    MyBool bool // asdasdasd
    pub MyStr string // asdasdasd
    MyVec<T> []T // asdasdasd
    MyArr<T int> [512]int // asdasdasd
    MyArr<T MyVec<int>> [512]T // asdasdasd
    MyArr<T MyVec<int>> [512][]int // asdasdasd
    // 123123sa
    pub MyRec<T> struct { // asdasdasd
        foo int // asdasdasd
        bar string // asdasdasd
        baz MyArr<T> // asdasdasd
        bax MyArr<int> // asdasdasd
        bac MyArr<struct { // asdasdasd
            bazus int // asx
            bazus2 vec<float> // asd
        }>
        bam struct {
            asd int
            foo float
        }
    }
    anotherRec struct { // test
        foo int
    }
    MyEnum enum {
        First
        Second
    }
    MyUnion MyFloat | MyVec | MyArr | MyRec | int
}

types {
    MyAny any
    MyErr error
    MyFloat float
    MyBool bool
    MyStr string
    MyVec<T> []T
    MyArr<T> [512]T
    MyRec<T> struct {
        foo int
        bar string
        baz MyArr<T>
        baz2 MyArr<int>
        baz3 MyArr<struct {
            foo int
            bar string
            baz MyArr<T>
            baz2 MyArr<int>
            baz3 MyArr<int>
        }>
    }
    MyEnum enum {
        First
        Second
    }
    MyUnion MyFloat | MyVec<int> | MyArr<MyVec<int>> | MyRec<struct {foo float}> | MyEnum
}

interfaces {
    IMyInterface<T bool>(y notStorage, x int) (z T)
    pub IMyInterface2<T MyUnion>(x int) (z T)
    IMyInterface3<T bool>(y notStorage, x int) (z T)
}

const {
    myTrue bool true
    pi myFloat 3.14
    pub my_vec MyVec<myFloat> [pi, pi]
    zero any nil
    foo struct { bar int } { bar: 42 }
    pub my_friend MyRec<float> {
        foo: 27
        bar: "john"
        baz: 42.0
    }
    my_str string "my string"
}

components {
    pub Doer<T int>(x int) (z T) {
        nodes {
            abstractNode IMyInterface
            printer std_pkg.Printer
            reader elsewhere.Reader<string>
        }
        net {
            in.x -> printer.in.v
            printer.out.v -> {
                reader.in.v
                out.z
            }
        }
    }
    
    pub Doer2 <T float>(x int) (z T, x2 []struct {foo bool }) {
        nodes {
            abstractNode IMyInterface
            printer std_pkg.Printer
            reader elsewhere.Reader<string>
        }
        net {
            in.x -> printer.in.v
            printer.out.v -> {
                reader.in.v
                out.z
            }
        }
    }

    Doer2<T float>(x int) (z T, z2 bool) {
        nodes {
            abstractNode IMyInterface
            printer std_pkg.Printer
            reader elsewhere.Reader<string>
        }
        net {
            in.x -> printer.in.v
            printer.out.v -> {
                reader.in.v
                out.z
            }
        }
    }

    #runtime_func(Read)
    pub Read(sig) (v string)

    #runtime_func(Print)
    pub Print<T>(v T) (v T)

    #runtime_func(Lock)
    pub Lock<T>(sig, v T) (v T)

    #runtime_func(ParseInt)
    pub ParseInt(v string) (v int, err string)
}

