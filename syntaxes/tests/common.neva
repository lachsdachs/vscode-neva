// comments

use {
    std/tmp/io
	stdpkg
	imported/from/elsewhereas
	with_alias another/imported/from/elsewhere
}

types {
    MyErr error
    MyFloat float
    MyBool bool
    MyStr str
    MyVec<T> []T
    MyArr<T int> [512]int
    MyArr<T MyVec<int>> [512]T
    MyArr<T MyVec<int>> [512][]int
    MyRec<T> {
        foo int
        bar str
        baz MyArr<T>
        bax MyArr<int>
        bac MyArr<{
            bazus int
            bazus2 vec<float>
        }>
        bam {} // FIXME if remove this, then lines after parsed ok
    }
    MyEnum {
        First
        Second
    }
    MyUnion MyFloat | MyVec | MyArr | MyRec | MyEnum
}

// broken example
types {
    MyErr error
    MyFloat float
    MyBool bool
    MyStr str
    MyVec<T> []T
    MyArr<T> [512]T
    MyRec<T> {
        foo int
        bar str
        baz MyArr<T>
        baz2 MyArr<int>
        baz3 MyArr<{
            foo int
            bar str
            baz MyArr<T>
            baz2 MyArr<int>
            baz3 MyArr<int>
        }>
    }
    MyEnum {
        First
        Second
    }
    MyUnion MyFloat | MyVec<int> | MyArr<MyVec<int>> | MyRec<{foo bar}> | MyEnum
}

interfaces {
    IMyInterface<T bool>(y notStorage, x int) (z T)
    pub IMyInterface2<T MyUnion>(x int) (z T)
}

const {
    myTrue true
    pi myFloat 3.14
    my_vec MyVec<myFloat> [pi, pi]
    pub my_friend MyRec<float> {
        foo: 27
        bar: "john"
        baz: 42.0
    }
    my_str "my string"
}

components {
    pub Doer<T float>(x int) (z T) {
        nodes {
            abstractNode IMyInterface
            printer std_pkg.Printer
            reader elsewhere.Reader<str>
        }
        net {
            in.x -> printer.in.v
            printer.out.v -> {
                reader.in.v
                out.z
            }
        }
    }

    Doer2<T float>(x int) (z T) {
        nodes {
            abstractNode IMyInterface
            printer std_pkg.Printer
            reader elsewhere.Reader<str>
        }
        net {
            in.x -> printer.in.v
            printer.out.v -> {
                reader.in.v
                out.z
            }
        }
    }
}

