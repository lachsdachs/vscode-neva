// comments

import {
    std/io

    @/my_lovely_mod/foo
    @/my_lovely_mod/bar/baz

	github.com/nevalang/x
}

type Primitive Num | string | bool

pub type Num int | float

type User struct {
    age int
    name string
    bestFriend struct {
        isDog bool // should be true
    }
}

type {
    User struct {
        age int
        name string
        bestFriend struct {
            isDog bool // should be true
        }
    }
    pub Primitive Num | string | bool
    pub Users list<User>
}

interface IStreamHandler<T>(seq stream<T>) (res T)

pub interface IListStreamer<T>(l list<T>) (seq stream<T>)

interface {
    IStreamHandler<T>(seq stream<T>) (res T)
    pub IListStreamer<T>(l list<T>) (seq stream<T>)
}

const greet string = "Hello, world!"

pub const nums list<int> = [1, 2, 3, 4, 5]

const {
    pi float = 3.14
    greet string = "Hello, world!"
    pub nums list<int> = [1, 2, 3, 4, 5]
}

component Main(enter any) (exit any) {
    nodes {
        bypass Bypass<float>
        printer Printer<float>
        writer foo.FileWriter
    }
    net {
        in:enter -> (pi -> bypass:foo)
        bypass:bar -> [printer:msg, writer:msg]
        printer:msg -> out:exit
    }
}

pub component Bypass<T float>(foo T) (bar T) {
    net { in.foo -> out.bar }
}

component {
    Main(enter any) (exit any) {
        nodes {
            bypass Bypass<float>
            printer Printer<float>
            writer foo.FileWriter
        }
        net {
            in:enter -> (pi -> bypass:foo)
            bypass:bar -> [printer:msg, writer:msg]
            printer:msg -> out:exit
        }
    }

    pub Bypass<T float>(foo T) (bar T) {
        net { in.foo -> out.bar }
    }
}

