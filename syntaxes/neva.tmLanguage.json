{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "neva",
  "scopeName": "source.neva",
  "fileTypes": [
    ".neva"
  ],
  "repository": {
    "pub": {
      "match": "\\b(pub)\\b",
      "name": "storage.modifier.public"
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "begin": "\\/\\/",
          "beginCaptures": {
            "1": {
              "name": "punctuation.definition.comment"
            }
          },
          "end": "(?:\\n|$)"
        }
      ]
    },
    "storage_types": {
      "patterns": [
        {
          "match": "\\bany\\b",
          "name": "storage.type.any"
        },
        {
          "match": "\\bmaybe\\b",
          "name": "storage.type.maybe"
        },
        {
          "match": "\\bbool\\b",
          "name": "storage.type.boolean"
        },
        {
          "match": "\\b(int|float)\\b",
          "name": "storage.type.numeric"
        },
        {
          "match": "\\bstring\\b",
          "name": "storage.type.string"
        },
        {
          "match": "\\bmap\\b",
          "name": "storage.type.map"
        },
        {
          "match": "\\blist\\b",
          "name": "storage.type.list"
        },
        {
          "match": "\\berror\\b",
          "name": "storage.type.error"
        },
        {
          "match": "\\bstream\\b",
          "name": "storage.type.stream"
        },
        {
          "include": "#struct_type"
        },
        {
          "include": "#enum_type"
        }
      ]
    },
    "struct_type": {
      "patterns": [
        {
          "begin": "\\b(struct)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.struct"
            }
          },
          "end": "\\}",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#storage_types"
            }
          ]
        }
      ]
    },
    "enum_type": {
      "patterns": [
        {
          "begin": "\\b(enum)\\s*\\{",
          "beginCaptures": {
            "1": {
              "name": "keyword.struct"
            }
          },
          "end": "\\}",
          "name": "variable.other.enummember"
        }
      ]
    },
    "numeric_literals": {
      "patterns": [
        {
          "match": "\\b0[xX][0-9a-fA-F]+\\b",
          "name": "constant.numeric.hexadecimal"
        },
        {
          "match": "\\b[0-9]+\\.?[0-9]*([eE][-+]?[0-9]+)?\\b",
          "name": "constant.numeric.float"
        },
        {
          "match": "\\b[0-9]+\\b",
          "name": "constant.numeric.integer"
        }
      ]
    },
    "string_literals": {
      "patterns": [
        {
          "name": "string.quoted.double",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "match": "\\\\\"\"",
              "name": "constant.character.escape.double-quote"
            }
          ]
        }
      ]
    },
    "bool_literals": {
      "match": "\\b(true|false)",
      "name": "constant.language.boolean"
    },
    "nil_literal": {
      "match": "\\b(nil)",
      "name": "constant.language.nil"
    },
    "struct_literal": {
      "patterns": [
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#nil_literal"
            },
            {
              "include": "#bool_literals"
            },
            {
              "include": "#numeric_literals"
            },
            {
              "include": "#string_literals"
            },
            {
              "include": "#struct_literal"
            }
          ]
        }
      ]
    },
    "compiler_directives": {
      "patterns": [
        {
          "name": "meta.directive",
          "begin": "\\#",
          "beginCaptures": {
            "1": {
              "name": "meta.directive"
            }
          },
          "end": "(?:\\n|$)"
        }
      ]
    },
    "component_nodes": {
      "patterns": [
        {
          "include": "#storage_types"
        },
        {
          "match": "^(\\s*)\\b(\\w+)\\b",
          "captures": {
            "2": {
              "name": "variable.other.node"
            }
          }
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "include": "#component_nodes"
            }
          ]
        }
      ]
    }
  },
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "begin": "\\b(import)\\s*\\{",
      "beginCaptures": {
        "1": {
          "name": "keyword.import"
        }
      },
      "end": "\\}",
      "patterns": [
        {
          "match": "^(\\s*)([^\\s/]+)\\s+[^\\s]+(?:/[^\\s]+)*$",
          "captures": {
            "2": {
              "name": "entity.name.section"
            }
          }
        },
        {
          "match": "^(\\s*)[^\\s/]+(?:/[^\\s/]+)*(/([^\\s/]+))\\s*$",
          "captures": {
            "3": {
              "name": "entity.name.section"
            }
          }
        },
        {
          "match": "^(\\s*)[^\\s/]+\\s*$",
          "captures": {
            "0": {
              "name": "entity.name.section"
            }
          }
        },
        {
          "include": "#comments"
        }
      ]
    },
    {
      "begin": "\\b(types)\\s*\\{",
      "beginCaptures": {
        "1": {
          "name": "keyword.type"
        }
      },
      "end": "\\}",
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#pub"
        },
        {
          "include": "#storage_types"
        }
      ]
    },
    {
      "begin": "\\b(interfaces)\\s*\\{",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.interfaces"
        }
      },
      "end": "\\}",
      "patterns": [
        {
          "include": "#pub"
        },
        {
          "include": "#storage_types"
        }
      ]
    },
    {
      "begin": "\\b(const)\\s*\\{",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.const"
        }
      },
      "end": "\\}",
      "patterns": [
        {
          "include": "#pub"
        },
        {
          "include": "#struct_literal"
        },
        {
          "include": "#storage_types"
        },
        {
          "include": "#string_literals"
        },
        {
          "include": "#numeric_literals"
        },
        {
          "include": "#bool_literals"
        },
        {
          "include": "#nil_literal"
        }
      ]
    },
    {
      "begin": "\\b(components)\\s*\\{",
      "beginCaptures": {
        "1": {
          "name": "keyword.declaration.function"
        }
      },
      "end": "\\}",
      "patterns": [
        {
          "include": "#compiler_directives"
        },
        {
          "include": "#pub"
        },
        {
          "include": "#storage_types"
        },
        {
          "match": "\\b(\\w+)\\b(?=\\s*<|\\s*\\()",
          "name": "entity.name.section"
        },
        {
          "begin": "\\{",
          "end": "\\}",
          "patterns": [
            {
              "begin": "\\b(nodes)\\s*\\{",
              "beginCaptures": {
                "1": {
                  "name": "entity.name.section"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "include": "#component_nodes"
                }
              ]
            },
            {
              "begin": "\\b(net)\\s*\\{",
              "beginCaptures": {
                "1": {
                  "name": "entity.name.section"
                }
              },
              "end": "\\}",
              "patterns": [
                {
                  "match": "->",
                  "name": "keyword.control"
                },
                {
                  "begin": "\\{",
                  "end": "\\}"
                }
              ]
            }
          ]
        }
      ]
    }
  ]
}
